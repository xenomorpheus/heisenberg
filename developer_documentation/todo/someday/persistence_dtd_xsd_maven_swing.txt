2012-08-31


Hey Mike, have a read through these:

Good JPA documentation; nice detail on annotations etc:
http://www.objectdb.com/api/java/jpa

Whatever you do in the DB space, make sure you're using the JPA (javax.persistence) 
interfaces in your database-persistence annotated objects. Then, the implementation 
you choose (OpenJPA, Hibernate, etc etc) is largely irrelevant.

Apache CXF (web services framework essentially, focussing on SOAP/XML/ReST/etc) resources:
http://cxf.apache.org/resources-and-articles.html

In terms of the best tool to go from XML to objects and back, you might want to ask Pete what he recommends. 
CXF includes this functionality natively, but it may not be the most ideal mechanism for you.

From a database app perspective, my experience is limited to Maven projects with respect to 
satisfying/obtaining/packaging dependencies. Our apps also use Spring to set up the environment 
(the application "context"), and set up the database persistence. But I can certainly run through
 that with you, and show you how to wire things up and get started with Spring. Without Spring, 
 you just need a main class that initialises your entity manager and associated classes.

Cheers, Ads

--
Adam Day
