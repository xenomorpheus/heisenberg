package au.net.hal9000.heisenberg.ai;

import au.net.hal9000.heisenberg.units.Point3d;

/**
 * A very simple model state. It holds two positions, the agent and the goal.
 */
public class ModelStateV1 implements ModelState, Cloneable {

    /** The agent moving to goal. */
    private Point3d agentPosition;
    /** Where the agent wants to be. */
    private Point3d goalPosition;

    /**
     * Constructor.
     * 
     * @param agentPosition
     *            agent position.
     * @param goalPosition
     *            goal position.
     */
    public ModelStateV1(Point3d agentPosition, Point3d goalPosition) {
        this.agentPosition = agentPosition;
        this.goalPosition = goalPosition;
    }

    /**
     * @return get agent position.
     */
    public Point3d getAgentPosition() {
        return agentPosition;
    }

    /**
     * @param position3d
     *            set agent position.
     */
    public void setAgentPosition(Point3d position3d) {
        this.agentPosition = position3d;
    }

    /**
     * @return get goal position.
     */
    public Point3d getGoalPosition() {
        return goalPosition;
    }

    /**
     * @param position3d
     *            set goal position.
     */
    public void setGoalPosition(Point3d position3d) {
        this.goalPosition = position3d;
    }

    @Override
    public ModelStateV1 clone() throws CloneNotSupportedException {
        ModelStateV1 newModeState = (ModelStateV1) super.clone();
        newModeState.agentPosition = this.agentPosition.clone();
        newModeState.goalPosition = this.goalPosition.clone();
        return newModeState;
    }

    // Autogenerated
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + ((agentPosition == null) ? 0 : agentPosition.hashCode());
        result = prime * result
                + ((goalPosition == null) ? 0 : goalPosition.hashCode());
        return result;
    }

    // Autogenerated
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        ModelStateV1 other = (ModelStateV1) obj;
        if (agentPosition == null) {
            if (other.agentPosition != null) {
                return false;
            }
        } else if (!agentPosition.equals(other.agentPosition)) {
            return false;
        }
        if (goalPosition == null) {
            if (other.goalPosition != null) {
                return false;
            }
        } else if (!goalPosition.equals(other.goalPosition)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "[agent=" + agentPosition + ", goal=" + goalPosition + "]";
    }

}
